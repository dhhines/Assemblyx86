Test date: 02/28/21  11:53:10 
The number of times you used the grading program is 1 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Key Grading System Version 4.1
Student: Last=Hines                First=David                Type=Individual          
Grading and testing history log
       User Test.    Date: 02/28/21  11:44:58  keyboard     test         
       User Test.    Date: 02/28/21  11:46:10  nt           test         
       User Test.    Date: 02/28/21  11:49:34  keyboard     test         
       User Test.    Date: 02/28/21  11:49:59  keyboard     test         
       User Test.    Date: 02/28/21  11:50:24  keyboard     test         
       User Test.    Date: 02/28/21  11:50:46  keyboard     test         
       User Test.    Date: 02/28/21  11:51:11  keyboard     test         
       User Test.    Date: 02/28/21  11:52:24  keyboard     test         
   *** Grading Run.  Date: 02/28/21  11:53:10 
Running test
Test ran correctly.
++ Grade ++   60 = Points earned for correct answers.

-> A major reason for programming in assembler is to maximize efficiency.
This can be instructions written and/or instructions executed.
Please read the section in the class notes titled Code Complexity.

We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
20 points for   0 -  20  
15 points for  21 -  22  
10 points for  23 -  24 
05 points for  25 -  26 
00 points for  27+      
Your actual counts are:
Lines ....... 111    Comments ...  75    Labels .......   4   
Directives ..   6    Variables ..  11    Executables ..  15    McCabe ..   3 
++ Grade ++   20 = Points earned for code written efficiency.  

The McCabe number for your KEY.ASM is 3 which is considered 
fine for the KEY assignment and indicates reasonable program structure.

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0038 The program header format is adequate. 
DOCHB-1.13 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
     8  = Number of user tests.                                  
     1  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC86&k~C6&juiC86&zuzC766&Zkyz&jgzk@&6858>587&&77@;9@76&

Building the file key.ans for electronic submission...
;--------------------------------------------------------------------
;   Program:  Key (MASM version)
;
;   Function: Key reads ASCII characters in the range of 20h-7Fh from
;             Standard Input (which can be from keyboard or redirected
;             ASCII text file) without echo (ah=08h and int 21h).
;
;             Characters input to Key are processed immediately, one
;             by one, as they read in from Standard Input (stdin).
;
;             Each character is processed using the following rules:
;             - Characters that are uppercase b/w A - Z are written to
;               Standard Output (stdout)
;             - Characters that are lowercase b/w a - z are converted
;               to the uppercase letter and printed to stdout
;             - Blank (20h) and period (2Eh) are printed to stdout
;             - All other characters input are discarded and Key moves
;               on to the next input character
;             - Key ends processing after reading a period (2Eh) and
;               printing that period to stdout
;
;             Notes about the program specification:
;             - This program only handles ASCII characters in the
;               range of 20h-7Fh
;             - The program output must have the terminating period
;             - No special ASCII characters will be handled such as
;               F1 - F12 keys which generate two calls
;             - There are NO output messages or prompts to the user!
;               It is expected that the user has read the program
;               documentation and understands the program function
;
;   Owner:    DHH
;
;   Date      Reason
;   -----     ------
;   02/26/21  Original version
;
;---------------------------------------
         .model     small              ; 64k code and 64k data
         .8086                         ; only allow 8086 instructions
         .stack     256                ; reserve 256 bytes for the stack
;---------------------------------------


;------------------------------------------------
         .data                                  ; start the data segment
;------------------------------------------------
term_ch  db        2Eh                          ; termination character
spc_ch   db        20h                          ; space character
trnslt   db        32 dup ('!')                 ; Translate table to convert everything
         db        ' '                          ; ....that is not letter to ! for easy cmp
         db        13 dup ('!')                 ; ....all valid characters (period, space, uppercase)
         db        '.'                          ; ....are translated to same value
         db        18 dup ('!')                 ; Lowercase letters are translated to
         db        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ; ....the uppercase equivalent
         db        6 dup ('!')                  ; All other characters are set to !
         db        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ; ....this allows for easy cmp and jumps
         db        133 dup ('!')                ; Values align with dec equiv in ASCII table
;------------------------------------------------


;------------------------------------------------
         .code                                  ; start the code segment
;------------------------------------------------
start:                                          ; label for start of program execution
         mov       ax,@data                     ; establish the addressability to the
         mov       ds,ax                        ; data segment for the Key program
         mov       bx,offset trnslt             ; Point bx to trnslt table offset
;------------------------------------------------
; Read in a character without echo.
;------------------------------------------------
getchar:                                        ; label for get next character loop start
         mov       ah,8                         ; reads input of character without echo
         int       21h                          ; by setting ah=8 and interrupt 21h
;------------------------------------------------
; Input character is now ready to process in al
; to determine print, change or ignore or end
;------------------------------------------------


;------------------------------------------------
; Check character to determine if it is printed
; or will be converted to uppercase or if it
; will be discarded.  If character is 2Eh then end
;------------------------------------------------
         xlat                                   ; Translate character using trnslt table
         cmp       al,'!'                       ; Compare to ! character and if equal
         je        getchar                      ; ..... jump to get next character
         mov       dl,al                        ; Move the input to dl register for processing
;------------------------------------------------


;------------------------------------------------
; Output the character and if period move on to exit
;------------------------------------------------
 output:                                        ; Output label for printing character
         mov       ah,2                         ; Set ah=2 to prepare to output character in dl
         int       21h                          ; Interrupt 21h to output to stdout
         cmp       dl,[term_ch]                 ; Determine if dl holds term char period
         jne       getchar                      ; if no period, get the next character
;------------------------------------------------


;------------------------------------------------
; terminate program execution after term character
;------------------------------------------------
exit:                                           ; label for exit of proram
         mov       ax,4c00h                     ; set DOS code to terminate program
         int       21h                          ; return to DOS
         end       start                        ; end of the program and mark of start
;------------------------------------------------